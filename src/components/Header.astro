---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;
const { siteLogo, navLinks } = Astro.props;
---

<header class="sticky top-0 z-50 mx-auto flex max-w-5xl items-center justify-between bg-gray-900 px-5 py-4 shadow-md">
  <!-- Left side: Logo + Navigation -->
  <div class="flex items-center gap-6">
    <!-- Logo -->
    <a href="/" aria-label="Home link">
      <Image
        src={siteLogo}
        width="45"
        height="45"
        alt="website logo"
        class="rounded-full"
      />
    </a>

    <!-- Navigation -->
    <nav>
      <ul class="flex gap-6">
        {navLinks.map((link) => (
          <li class="relative">
            <a
              href={link.href}
              class="text-neutral text-sm font-medium transition-colors hover:text-white relative after:absolute after:bottom-0 after:left-1/2 after:h-1 after:w-1 after:-translate-x-1/2 after:content-['â€¢'] after:opacity-0 after:transition-opacity after:duration-300"
            >
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>

  <!-- Right side: Social Icons -->
  <div class="flex gap-4">
    <a
      href="mailto:sethcooliemon4@gmail.com"
      class="text-neutral hover:text-white transition-colors"
      aria-label="Email"
    >
      <img src="/Email.svg" alt="Email" class="w-5 h-5" />
    </a>
    <a
      href="https://github.com/swilliams2000"
      target="_blank"
      class="text-neutral hover:text-white transition-colors"
      aria-label="GitHub"
    >
      <img src="/Github.svg" alt="GitHub" class="w-5 h-5" />
    </a>
    <a
      href="https://www.linkedin.com/in/seth-m-williams/"
      target="_blank"
      class="text-neutral hover:text-white transition-colors"
      aria-label="LinkedIn"
    >
      <img src="/Linkedin.svg" alt="LinkedIn" class="w-5 h-5" />
    </a>
  </div>
</header>

<!-- Mobile Menu Button -->
<button
  type="button"
  id="menu-button"
  class="sm:hidden px-2 text-neutral"
  aria-expanded="false"
  aria-controls="mobile-menu"
>
  <Menu />
</button>

<!-- Mobile Menu -->
<nav
  id="mobile-menu"
  class="sm:hidden hidden absolute top-16 right-5 rounded-xl border border-neutral/40 bg-gray-900 p-4 text-neutral"
>
  <ul class="flex flex-col gap-3">
    {navLinks.map((link) => (
      <li>
        <a
          href={link.href}
          class="text-neutral hover:text-white"
        >
          {link.text}
        </a>
      </li>
    ))}
    <li class="flex gap-3 mt-2">
      <a href="mailto:sethcooliemon4@gmail.com" class="text-neutral hover:text-white">
        <img src="/Email.svg" alt="Email" class="w-5 h-5" />
      </a>
      <a href="https://github.com/swilliams2000" target="_blank" class="text-neutral hover:text-white">
        <img src="/Github.svg" alt="GitHub" class="w-5 h-5" />
      </a>
      <a href="https://www.linkedin.com/in/seth-m-williams/" target="_blank" class="text-neutral hover:text-white">
        <img src="/Linkedin.svg" alt="LinkedIn" class="w-5 h-5" />
      </a>
    </li>
  </ul>
</nav>

<script>
  // Mobile menu toggle
  const button = document.getElementById("menu-button");
  const menu = document.getElementById("mobile-menu");

  button?.addEventListener("click", () => {
    const isHidden = menu?.classList.toggle("hidden");
    button.setAttribute("aria-expanded", String(!isHidden));
  });

  // Intersection Observer for active section highlighting
  const navItems = document.querySelectorAll("nav ul li a");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const id = entry.target.id;
        navItems.forEach((item) => {
          const href = item.getAttribute("href")?.replace("#", "");
          if (href === id && entry.isIntersecting) {
            item.classList.add("text-white");
            item.classList.add("after:opacity-100");
          } else {
            item.classList.remove("text-white");
            item.classList.remove("after:opacity-100");
          }
        });
      });
    },
    { root: null, rootMargin: "-50% 0px -50% 0px", threshold: 0 }
  );

  document
    .querySelectorAll("section[id]")
    .forEach((section) => observer.observe(section));
</script>



