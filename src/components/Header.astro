---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;
const { siteLogo, navLinks } = Astro.props;
---

<header class="sticky top-0 z-50 flex items-center justify-between bg-black px-5 py-4 max-w-5xl mx-auto">
  <!-- Left side: Logo + nav -->
  <div class="flex items-center gap-6">
    <a href="/" aria-label="Home link">
      <Image src={siteLogo} width="45" height="45" alt="website logo" class="rounded-full"/>
    </a>
    <nav class="hidden sm:block">
      <ul class="flex gap-4">
        {navLinks.map((link) => (
          <li class="relative">
            <a
              href={link.href}
              class="text-neutral transition-colors hover:text-white font-medium text-sm relative after:absolute after:bottom-0 after:left-1/2 after:w-1 after:h-1 after:-translate-x-1/2 after:content-['â€¢'] after:opacity-0 hover:after:opacity-100"
            >
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>

  <!-- Right side: social icons -->
  <div class="hidden sm:flex gap-4">
    <a href="Sethcooliemon4@gmail.com" class="text-neutral hover:text-white transition-colors">
      <img src="/Email.svg" alt="Email" class="w-5 h-5"/>
    </a>
    <a href="https://github.com/swilliams2000" class="text-neutral hover:text-white transition-colors">
      <img src="/Github.svg" alt="GitHub" class="w-5 h-5"/>
    </a>
    <a href="https://www.linkedin.com/in/seth-m-williams/" class="text-neutral hover:text-white transition-colors">
      <img src="/Linkedin.svg" alt="LinkedIn" class="w-5 h-5"/>
    </a>
  </div>

  <!-- Mobile menu button -->
  <button id="menu-button" class="sm:hidden px-2 text-neutral" aria-expanded="false" aria-controls="mobile-menu">
    <Menu />
  </button>
</header>

<!-- Mobile menu -->
<nav id="mobile-menu" class="sm:hidden hidden absolute top-16 right-5 bg-black p-4 rounded-xl border border-neutral/40">
  <ul class="flex flex-col gap-3">
    {navLinks.map((link) => (
      <li>
        <a href={link.href} class="text-neutral hover:text-white">{link.text}</a>
      </li>
    ))}
    <li class="flex gap-3 mt-2">
      <a href="" class="text-neutral hover:text-white"><img src="/Email.svg" alt="Email" class="w-5 h-5"/></a>
      <a href="" class="text-neutral hover:text-white"><img src="/Github.svg" alt="GitHub" class="w-5 h-5"/></a>
      <a href="" class="text-neutral hover:text-white"><img src="/Linkedin.svg" alt="LinkedIn" class="w-5 h-5"/></a>
    </li>
  </ul>
</nav>

<script lang="ts">
  // Mobile toggle
  const menuButton = document.getElementById("menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  if (menuButton && mobileMenu) {
    menuButton.addEventListener("click", () => {
      const isHidden = mobileMenu.classList.toggle("hidden");
      menuButton.setAttribute("aria-expanded", String(!isHidden));
    });
  }

  // Scroll-tracking dot indicator
  const navItems = document.querySelectorAll('header nav ul li a');
  const sections = document.querySelectorAll('section[id]');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      navItems.forEach(item => {
        const href = item.getAttribute('href') ?? '';
        if (href === `#${entry.target.id}` && entry.isIntersecting) {
          item.classList.add('text-white');
          item.classList.add('after:opacity-100');
        } else {
          item.classList.remove('text-white');
          item.classList.remove('after:opacity-100');
        }
      });
    });
  }, { threshold: 0.6 });

  sections.forEach(section => observer.observe(section));
</script>


