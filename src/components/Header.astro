---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;
const { siteLogo, navLinks } = Astro.props;
---

<header class="sticky top-0 z-50 mx-auto flex max-w-5xl animate-slide-in justify-between bg-black px-5 py-6">
  <!-- Logo -->
  <a href="/" aria-label="Home link">
    <Image
      class="rounded-full"
      src={siteLogo}
      width="45"
      height="45"
      alt="website logo"
    />
  </a>

  <!-- Mobile menu button -->
  <button
    type="button"
    id="menu-button"
    class="px-1.5 text-neutral sm:hidden"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <!-- Navigation -->
  <nav
    class="absolute top-20 right-5 hidden rounded-xl border border-neutral/40 bg-black px-4 py-5 text-neutral sm:static sm:block sm:border-0 sm:bg-transparent sm:p-0"
    id="main-menu"
  >
    <ul class="gap-2 sm:flex">
      {navLinks.map((link) => (
        <li class="relative">
          <a
            class="nav-item relative block p-2 text-sm font-medium transition-all duration-500 hover:text-white"
            href={link.href}
          >
            {link.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<script>
  // Mobile menu toggle
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => item?.addEventListener("click", toggleMenu));

  // Intersection Observer for active dot
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        navItems.forEach((item) => {
          if (item.getAttribute("href") === `#${entry.target.id}`) {
            item.classList.add("active-dot");
          } else {
            item.classList.remove("active-dot");
          }
        });
      });
    },
    { threshold: 0.3 }
  );

  document.querySelectorAll("section").forEach((section) => {
    observer.observe(section);
  });

  // Cleanup observer when tab hidden
  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      document.querySelectorAll("section").forEach((section) => observer.observe(section));
    }
  });
</script>

<style>
  /* Active dot under nav items */
  .nav-item.active-dot::after {
    content: 'â€¢';
    color: #3b82f6; /* blue */
    position: absolute;
    bottom: -0.25rem;
    left: 50%;
    transform: translateX(-50%);
    font-size: 1rem;
    opacity: 1;
    transition: opacity 0.3s;
  }

  /* Optional: ensure nav items relative for dot positioning */
  .nav-item {
    position: relative;
  }
</style>
